type AdvanceTrainConfig = record {
  hidden_units : opt vec nat64;
  early_stopping_patience : opt nat64;
  validation_split : opt float64;
  loss_function : opt text;
  activation : opt text;
  dropout_rate : opt float64;
};
type Pred = record {
  up : float64;
  staked : float64;
  trend : text;
  down : float64;
};
type Predictor = record {
  id : text;
  trend : opt text;
  pred : Pred;
  canister_id : text;
  user_id : text;
  stake : record { float64; float64 };
  create_time : nat64;
  price : float64;
};
type Result = variant { Ok : vec text; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok : vec float32; Err : text };
type Result_3 = variant { Ok : Value; Err : text };
type Result_4 = variant { Ok; Err : text };
type Result_5 = variant { Ok : Predictor; Err : text };
type TrainConfig = record {
  weight_decay : opt float64;
  advance_train_config : opt AdvanceTrainConfig;
  batch_size : opt nat64;
  epochs : opt nat64;
  optimizer : opt text;
  momentum : opt float64;
  learning_rate : opt float64;
};
type Value = variant {
  Text : text;
  BtreeMap : vec record { text; text };
  Vector : vec text;
  Number : nat64;
};
service : () -> {
  collect_metrics : () -> ();
  find_model_lists : () -> (Result) query;
  get_canister_info : () -> () query;
  get_current_version : () -> () query;
  get_default_model : () -> (Result_1) query;
  is_predict_running : () -> (bool) query;
  predict : () -> (Result_2);
  set_default_model : (text) -> (Result_3);
  set_start_predict : () -> (Result_4);
  set_stop_predict : () -> (Result_4);
  set_timer_interval : (nat64) -> (Result_4);
  set_train_params : (TrainConfig) -> (Result_4);
  test1 : () -> (Result_5);
  train : () -> (Result_4);
  update_canister_info : () -> ();
}
