type Account = record { owner : principal; subaccount : opt blob };
type Approve = record {
  fee : opt nat;
  from : Account;
  memo : opt blob;
  created_at_time : opt nat64;
  amount : nat;
  expected_allowance : opt nat;
  expires_at : opt nat64;
  spender : Account;
};
type ArchivedRange = record {
  callback : func (GetBlocksRequest) -> (BlockRange) query;
  start : nat;
  length : nat;
};
type ArchivedRange_1 = record {
  callback : func (GetBlocksRequest) -> (TransactionRange) query;
  start : nat;
  length : nat;
};
type BlockRange = record { blocks : vec Value };
type Burn = record {
  from : Account;
  memo : opt blob;
  created_at_time : opt nat64;
  amount : nat;
  spender : opt Account;
};
type DurationRange = variant {
  Microseconds;
  Minutes;
  Seconds;
  Days;
  Milliseconds;
  Hours;
  Nanoseconds;
};
type GetBlocksRequest = record { start : nat; length : nat };
type GetBlocksResponse = record {
  certificate : opt blob;
  first_index : nat;
  blocks : vec Value;
  chain_length : nat64;
  archived_blocks : vec ArchivedRange;
};
type GetTransactionsResponse = record {
  first_index : nat;
  log_length : nat;
  transactions : vec Transaction;
  archived_transactions : vec ArchivedRange_1;
};
type HttpResponse = record {
  body : blob;
  headers : vec record { text; text };
  status_code : nat16;
};
type ICRC2AllowanceResponse = record {
  allowance : nat;
  expires_at : opt nat64;
};
type Mint = record {
  to : Account;
  memo : opt blob;
  created_at_time : opt nat64;
  amount : nat;
};
type Pred = record {
  up : float64;
  staked : float64;
  trend : text;
  down : float64;
};
type Predictor = record {
  id : text;
  trend : opt text;
  pred : Pred;
  canister_id : text;
  user_id : text;
  stake : record { float64; float64 };
  create_time : nat64;
  price : float64;
};
type PredictorResult = record {
  trend : opt text;
  pred : Pred;
  price : opt float64;
};
type PredictorView = record {
  id : text;
  now : opt PredictorResult;
  next : opt PredictorResult;
  last_1 : opt PredictorResult;
  last_2 : opt PredictorResult;
  stake : record { float64; float64 };
  create_time : nat64;
  accuracy : float64;
};
type PriceData = record {
  low : float32;
  high : float32;
  close : float32;
  open : float32;
  volume : float32;
  price_diff : float32;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : WasmFile; Err : text };
type Result_10 = variant { Ok : PredictorView; Err : text };
type Result_11 = variant { Ok : User; Err : text };
type Result_2 = variant { Ok : GetBlocksResponse; Err : text };
type Result_3 = variant { Ok : text; Err : text };
type Result_4 = variant { Ok : vec Predictor; Err : text };
type Result_5 = variant { Ok : GetTransactionsResponse; Err : text };
type Result_6 = variant { Ok : vec WasmFile; Err : text };
type Result_7 = variant { Ok : nat; Err : text };
type Result_8 = variant { Ok : ICRC2AllowanceResponse; Err : text };
type Result_9 = variant { Ok : Predictor; Err : text };
type State = record {
  bias : opt vec float32;
  max_values : vec float32;
  weights : opt vec float32;
  prices : vec PriceData;
  min_values : vec float32;
};
type Transaction = record {
  burn : opt Burn;
  kind : text;
  mint : opt Mint;
  approve : opt Approve;
  timestamp : nat64;
  transfer : opt Transfer;
};
type TransactionRange = record { transactions : vec Transaction };
type Transfer = record {
  to : Account;
  fee : opt nat;
  from : Account;
  memo : opt blob;
  created_at_time : opt nat64;
  amount : nat;
  spender : opt Account;
};
type UpdateType = variant { FunctionUpdate; ModelUpdate };
type User = record {
  id : text;
  owner : principal;
  name : text;
  create_time : nat64;
};
type Value = variant {
  Int : int;
  Map : vec record { text; Value };
  Nat : nat;
  Nat64 : nat64;
  Blob : blob;
  Text : text;
  Array : Vec;
};
type Vec = vec variant {
  Int : int;
  Map : vec record { text; Value };
  Nat : nat;
  Nat64 : nat64;
  Blob : blob;
  Text : text;
  Array : Vec;
};
type WasmFile = record {
  wasm_version : text;
  update_type : UpdateType;
  wasm_bin : opt blob;
  upload_time : nat64;
  wasm_name : text;
};
service : () -> {
  add_price : (PriceData) -> ();
  backup_stable_memory : () -> (Result);
  delete_backup_data : (nat64) -> (bool);
  delete_wasm : (text, text) -> (Result_1);
  dump_stable_memory : (opt nat64) -> (HttpResponse) query;
  find_backup_data : (nat64) -> (opt text);
  find_backup_lists : () -> (vec record { nat64; nat64 }) query;
  find_user_lists : () -> (vec User) query;
  get_blocks : (GetBlocksRequest) -> (Result_2);
  get_canister_info : () -> (Result_3);
  get_latest_version : (UpdateType) -> (Result_1) query;
  get_predictor_vec : () -> (Result_4) query;
  get_principal : () -> (principal) query;
  get_state : () -> (State) query;
  get_transactions : (GetBlocksRequest) -> (Result_5);
  get_wasm_bin : (text, text) -> (Result_1) query;
  get_wasm_lists : () -> (Result_6) query;
  icrc1_balance_of : () -> (Result_7);
  icrc1_transfer : (Account, nat, opt blob) -> (Result_7);
  icrc2_allowance : (Account) -> (Result_8);
  icrc2_approve : (nat) -> (Result_3);
  icrc2_transfer_from : (Account, nat, opt blob) -> (Result_7);
  minting_or_burn : (Account, nat) -> (Result_7);
  predict : () -> (float32) query;
  push_user_pred : (Predictor) -> (Result_9);
  refill_random_buffer : (nat32) -> ();
  restore_from_file : (text) -> (Result);
  show_predictions : () -> (Result_10) query;
  // 质押token  累计计算
  stake : (nat, nat64) -> (Result);
  test_1 : (DurationRange) -> (nat64, nat64) query;
  train : (nat64) -> ();
  unstake : () -> (Result);
  upload_json_file : (blob) -> ();
  upload_wasm : (text, text, blob, UpdateType) -> (Result_3);
  user_login : () -> (Result_11) query;
  user_register : () -> (Result_11);
}
