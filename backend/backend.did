type Pred = record {
  up : float64;
  staked : float64;
  trend : text;
  down : float64;
};
type Predictor = record {
  id : text;
  trend : opt text;
  name : text;
  pred : Pred;
  stake : record { float64; float64 };
  create_time : nat64;
  price : float64;
};
type PredictorView = record {
  id : text;
  now : opt Predictor;
  next : opt Predictor;
  last_1 : opt Predictor;
  last_2 : opt Predictor;
  stake : record { float64; float64 };
  create_time : nat64;
  accuracy : float64;
};
type PriceData = record {
  low : float32;
  high : float32;
  close : float32;
  open : float32;
  volume : float32;
  price_diff : float32;
};
type Result = variant { Ok : WasmFile; Err : text };
type Result_1 = variant { Ok : text; Err : text };
type Result_2 = variant { Ok : blob; Err : text };
type Result_3 = variant { Ok : vec WasmFile; Err : text };
type Result_4 = variant { Ok : PredictorView; Err : text };
type Result_5 = variant { Ok : vec Predictor; Err : text };
type Result_6 = variant { Ok : User; Err : text };
type State = record {
  bias : opt vec float32;
  max_values : vec float32;
  weights : opt vec float32;
  prices : vec PriceData;
  min_values : vec float32;
};
type User = record {
  id : text;
  owner : principal;
  name : text;
  create_time : nat64;
};
type WasmFile = record {
  wasm_version : text;
  wasm_bin : blob;
  wasm_name : text;
};
service : () -> {
  add_price : (PriceData) -> ();
  delete_wasm : (text, text) -> (Result);
  find_user_lists : () -> (vec User) query;
  get_canister_info : () -> (Result_1);
  get_state : () -> (State) query;
  get_wasm : (text) -> (Result_2) query;
  get_wasm_bin : (text, text) -> (Result) query;
  get_wasm_lists : () -> (Result_3) query;
  pred : () -> (Result_4) query;
  predict : () -> (float32) query;
  refill_random_buffer : (nat32) -> ();
  show_predictions : () -> (Result_5) query;
  train : (nat64) -> ();
  upload_json_file : (blob) -> ();
  upload_wasm : (text, text) -> (Result_2);
  user_login : () -> (Result_6) query;
  user_register : () -> (Result_6);
}
